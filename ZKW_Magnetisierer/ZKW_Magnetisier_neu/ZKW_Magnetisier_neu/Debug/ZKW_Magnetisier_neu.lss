
ZKW_Magnetisier_neu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000264  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006c1  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000052d  00000000  00000000  000009f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000458  00000000  00000000  00000f26  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  00001380  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000388  00000000  00000000  000014a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001dc  00000000  00000000  00001828  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001a04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	58 c0       	rjmp	.+176    	; 0xb4 <__vector_1>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	83 c0       	rjmp	.+262    	; 0x118 <__vector_8>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	a0 c0       	rjmp	.+320    	; 0x156 <__vector_10>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a4 36       	cpi	r26, 0x64	; 100
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	a6 d0       	rcall	.+332    	; 0x188 <main>
  3c:	d7 c0       	rjmp	.+430    	; 0x1ec <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <init_timer>:

void init_timer(void)
{
	TCCR0B = TCCR0B &~ (1<<CS00);		//Pre-scaler 256 (31250kHz/256 = 8ms)
  40:	83 b7       	in	r24, 0x33	; 51
  42:	8e 7f       	andi	r24, 0xFE	; 254
  44:	83 bf       	out	0x33, r24	; 51
	TCCR0B = TCCR0B &~ (1<<CS01);
  46:	83 b7       	in	r24, 0x33	; 51
  48:	8d 7f       	andi	r24, 0xFD	; 253
  4a:	83 bf       	out	0x33, r24	; 51
	TCCR0B = TCCR0B | (1<<CS02);
  4c:	83 b7       	in	r24, 0x33	; 51
  4e:	84 60       	ori	r24, 0x04	; 4
  50:	83 bf       	out	0x33, r24	; 51
	
	TIMSK = TIMSK | (1<<OCIE0A);	//interrupt
  52:	89 b7       	in	r24, 0x39	; 57
  54:	80 61       	ori	r24, 0x10	; 16
  56:	89 bf       	out	0x39, r24	; 57
	OCR0A = 255;					//2s
  58:	8f ef       	ldi	r24, 0xFF	; 255
  5a:	89 bd       	out	0x29, r24	; 41
  5c:	08 95       	ret

0000005e <init_adc>:
}

void init_adc(void)
{
	ADMUX = ADMUX &~ (1<<REFS0);		//Vcc as referenz
  5e:	3e 98       	cbi	0x07, 6	; 7
	ADMUX = ADMUX &~ (1<<REFS1);
  60:	3f 98       	cbi	0x07, 7	; 7

	ADMUX = ADMUX | (1<<ADLAR);			//Left adjusted
  62:	3d 9a       	sbi	0x07, 5	; 7
	
	ADMUX = ADMUX &~ (1<<MUX0);			//PB5 ADC0 single ended
  64:	38 98       	cbi	0x07, 0	; 7
	ADMUX = ADMUX &~ (1<<MUX1);
  66:	39 98       	cbi	0x07, 1	; 7
	ADMUX = ADMUX &~ (1<<MUX2);
  68:	3a 98       	cbi	0x07, 2	; 7
	ADMUX = ADMUX &~ (1<<MUX3);
  6a:	3b 98       	cbi	0x07, 3	; 7
	
	ADCSRA = ADCSRA | (1<<ADEN);		//ADC enable
  6c:	37 9a       	sbi	0x06, 7	; 6
	
	ADCSRA = ADCSRA | (1<<ADIE);		//Interrupt enable
  6e:	33 9a       	sbi	0x06, 3	; 6
	
	ADCSRA = ADCSRA &~ (1<<ADPS0);		//ADC prescaler
  70:	30 98       	cbi	0x06, 0	; 6
	ADCSRA = ADCSRA | (1<<ADPS1);		//Teiler 64
  72:	31 9a       	sbi	0x06, 1	; 6
	ADCSRA = ADCSRA | (1<<ADPS2);
  74:	32 9a       	sbi	0x06, 2	; 6
	
	ADCSRA = ADCSRA | (1<<ADSC);		//Wandlung starten
  76:	36 9a       	sbi	0x06, 6	; 6
  78:	08 95       	ret

0000007a <init_ext_interrupt>:
	/*
	MCUCR = MCUCR &~ (1<<ISC00);		//falling edge
	MCUCR = MCUCR | (1<<ISC01);
	*/
	
	MCUCR = MCUCR &~ (1<<ISC00);		//falling edge
  7a:	85 b7       	in	r24, 0x35	; 53
  7c:	8e 7f       	andi	r24, 0xFE	; 254
  7e:	85 bf       	out	0x35, r24	; 53
	MCUCR = MCUCR &~ (1<<ISC01);
  80:	85 b7       	in	r24, 0x35	; 53
  82:	8d 7f       	andi	r24, 0xFD	; 253
  84:	85 bf       	out	0x35, r24	; 53
	
	GIMSK = GIMSK | (1<<INT0);		//Int0 Interrupt freischalten
  86:	8b b7       	in	r24, 0x3b	; 59
  88:	80 64       	ori	r24, 0x40	; 64
  8a:	8b bf       	out	0x3b, r24	; 59
  8c:	08 95       	ret

0000008e <init_sleep_mode>:
}

void init_sleep_mode (void)
{	
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  8e:	85 b7       	in	r24, 0x35	; 53
  90:	87 7e       	andi	r24, 0xE7	; 231
  92:	80 61       	ori	r24, 0x10	; 16
  94:	85 bf       	out	0x35, r24	; 53
  96:	08 95       	ret

00000098 <mosfet_schalten>:
}


void mosfet_schalten(void)
{
	MOSFET_EIN;
  98:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	88 e6       	ldi	r24, 0x68	; 104
  9c:	8a 95       	dec	r24
  9e:	f1 f7       	brne	.-4      	; 0x9c <mosfet_schalten+0x4>
  a0:	00 00       	nop
	
	_delay_ms(MOSFETTIME);
	
	MOSFET_AUS;
  a2:	c1 98       	cbi	0x18, 1	; 24
  a4:	08 95       	ret

000000a6 <led_on>:
}
void led_on (void)
{
	PORTB = PORTB | (1<<PB4);
  a6:	c4 9a       	sbi	0x18, 4	; 24
  a8:	84 e8       	ldi	r24, 0x84	; 132
  aa:	9e e1       	ldi	r25, 0x1E	; 30
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <led_on+0x6>
  b0:	00 00       	nop
  b2:	08 95       	ret

000000b4 <__vector_1>:
	_delay_ms(1000);			//1s einschalten
}

ISR(INT0_vect)
{
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	2f 93       	push	r18
  c0:	3f 93       	push	r19
  c2:	4f 93       	push	r20
  c4:	5f 93       	push	r21
  c6:	6f 93       	push	r22
  c8:	7f 93       	push	r23
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
  ce:	af 93       	push	r26
  d0:	bf 93       	push	r27
  d2:	ef 93       	push	r30
  d4:	ff 93       	push	r31
	if(taster_ein >= 10)
  d6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <taster_ein>
  da:	8a 30       	cpi	r24, 0x0A	; 10
  dc:	58 f0       	brcs	.+22     	; 0xf4 <__vector_1+0x40>
	{
		if(adc_high >= V_CAP)
  de:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <adc_high>
  e2:	8e 31       	cpi	r24, 0x1E	; 30
  e4:	40 f0       	brcs	.+16     	; 0xf6 <__vector_1+0x42>
		{
			sleep_flag = 0;
  e6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			mosfet_schalten();
  ea:	d6 df       	rcall	.-84     	; 0x98 <mosfet_schalten>
			led_on();
  ec:	dc df       	rcall	.-72     	; 0xa6 <led_on>
			taster_ein = 0;
  ee:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <taster_ein>
  f2:	01 c0       	rjmp	.+2      	; 0xf6 <__vector_1+0x42>
		}	
	}
	else
	{
		PORTB = PORTB &~ (1<<PB4);
  f4:	c4 98       	cbi	0x18, 4	; 24
	}
		
}
  f6:	ff 91       	pop	r31
  f8:	ef 91       	pop	r30
  fa:	bf 91       	pop	r27
  fc:	af 91       	pop	r26
  fe:	9f 91       	pop	r25
 100:	8f 91       	pop	r24
 102:	7f 91       	pop	r23
 104:	6f 91       	pop	r22
 106:	5f 91       	pop	r21
 108:	4f 91       	pop	r20
 10a:	3f 91       	pop	r19
 10c:	2f 91       	pop	r18
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <__vector_8>:

ISR(ADC_vect)
{
 118:	1f 92       	push	r1
 11a:	0f 92       	push	r0
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
	adc_low = ADCL;
 126:	84 b1       	in	r24, 0x04	; 4
 128:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <adc_low>
	adc_high = ADCH;
 12c:	85 b1       	in	r24, 0x05	; 5
 12e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <adc_high>
	

	if (adc_high >= V_CAP)
 132:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <adc_high>
 136:	8e 31       	cpi	r24, 0x1E	; 30
 138:	28 f0       	brcs	.+10     	; 0x144 <__vector_8+0x2c>
	{
		PORTB = PORTB ^ (1<<PB4);	//LED toggln
 13a:	98 b3       	in	r25, 0x18	; 24
 13c:	80 e1       	ldi	r24, 0x10	; 16
 13e:	89 27       	eor	r24, r25
 140:	88 bb       	out	0x18, r24	; 24
 142:	01 c0       	rjmp	.+2      	; 0x146 <__vector_8+0x2e>
	}
	else
	{
		PORTB = PORTB &~ (1<<PB4);
 144:	c4 98       	cbi	0x18, 4	; 24
	}
	
	
	ADCSRA = ADCSRA | (1<<ADSC);	//Wandlung starten
 146:	36 9a       	sbi	0x06, 6	; 6
}
 148:	9f 91       	pop	r25
 14a:	8f 91       	pop	r24
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <__vector_10>:

ISR (TIMER0_COMPA_vect)
{
 156:	1f 92       	push	r1
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
 160:	8f 93       	push	r24
	TCNT0 = 0;
 162:	12 be       	out	0x32, r1	; 50
	
	sleep_flag++;
 164:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 168:	8f 5f       	subi	r24, 0xFF	; 255
 16a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	
	if(sleep_flag >= 200)
 16e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 172:	88 3c       	cpi	r24, 0xC8	; 200
 174:	18 f0       	brcs	.+6      	; 0x17c <__vector_10+0x26>
	{
		sleep_flag=200;
 176:	88 ec       	ldi	r24, 0xC8	; 200
 178:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	}
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <main>:


int main(void)
{
    
	CLKPR = 0x80;						//Clock prescaler 16MHz
 188:	80 e8       	ldi	r24, 0x80	; 128
 18a:	86 bd       	out	0x26, r24	; 38
	CLKPR = 0x08;		//31.250kHz
 18c:	88 e0       	ldi	r24, 0x08	; 8
 18e:	86 bd       	out	0x26, r24	; 38
	//CLKPR = 0x00;		//8MHz
	
	DDRB = DDRB | (1<<DDB0);		//Debug
 190:	b8 9a       	sbi	0x17, 0	; 23
	DDRB = DDRB | (1<<DDB1);		//MOSFET
 192:	b9 9a       	sbi	0x17, 1	; 23
	
	DDRB = DDRB &~ (1<<DDB5);		//ADC
 194:	bd 98       	cbi	0x17, 5	; 23
	
	
	DDRB = DDRB &~ (1<<DDB2);		//int0
 196:	ba 98       	cbi	0x17, 2	; 23
	PORTB = PORTB | (1<<PB2);		//pullup
 198:	c2 9a       	sbi	0x18, 2	; 24
	
	DDRB = DDRB | (1<<DDB4);		//Debug LED
 19a:	bc 9a       	sbi	0x17, 4	; 23
	PORTB = PORTB &~ (1<<PB4);
 19c:	c4 98       	cbi	0x18, 4	; 24
	
	
	init_ext_interrupt();
 19e:	6d df       	rcall	.-294    	; 0x7a <init_ext_interrupt>
	init_adc();
 1a0:	5e df       	rcall	.-324    	; 0x5e <init_adc>
	init_timer();
 1a2:	4e df       	rcall	.-356    	; 0x40 <init_timer>
	
	init_sleep_mode();
 1a4:	74 df       	rcall	.-280    	; 0x8e <init_sleep_mode>
	
	
	sei();
 1a6:	78 94       	sei
	
	sleep_mode();
 1a8:	85 b7       	in	r24, 0x35	; 53
 1aa:	80 62       	ori	r24, 0x20	; 32
 1ac:	85 bf       	out	0x35, r24	; 53
 1ae:	88 95       	sleep
 1b0:	85 b7       	in	r24, 0x35	; 53
 1b2:	8f 7d       	andi	r24, 0xDF	; 223
 1b4:	85 bf       	out	0x35, r24	; 53
		
		taster_ein++;
		
		if (taster_ein >= 200)
		{
			taster_ein = 200;
 1b6:	98 ec       	ldi	r25, 0xC8	; 200
	sleep_mode();

    while (1) 
    {
		
		taster_ein++;
 1b8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <taster_ein>
 1bc:	8f 5f       	subi	r24, 0xFF	; 255
 1be:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <taster_ein>
		
		if (taster_ein >= 200)
 1c2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <taster_ein>
 1c6:	88 3c       	cpi	r24, 0xC8	; 200
 1c8:	10 f0       	brcs	.+4      	; 0x1ce <main+0x46>
		{
			taster_ein = 200;
 1ca:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <taster_ein>
		}
		
		
		if (sleep_flag >= WARTEZEIT)
 1ce:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 1d2:	83 30       	cpi	r24, 0x03	; 3
 1d4:	88 f3       	brcs	.-30     	; 0x1b8 <main+0x30>
		{
			PORTB = PORTB &~ (1<<PB4);
 1d6:	c4 98       	cbi	0x18, 4	; 24
			sleep_mode();
 1d8:	85 b7       	in	r24, 0x35	; 53
 1da:	80 62       	ori	r24, 0x20	; 32
 1dc:	85 bf       	out	0x35, r24	; 53
 1de:	88 95       	sleep
 1e0:	85 b7       	in	r24, 0x35	; 53
 1e2:	8f 7d       	andi	r24, 0xDF	; 223
 1e4:	85 bf       	out	0x35, r24	; 53
			sleep_flag = 0;
 1e6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
 1ea:	e6 cf       	rjmp	.-52     	; 0x1b8 <main+0x30>

000001ec <_exit>:
 1ec:	f8 94       	cli

000001ee <__stop_program>:
 1ee:	ff cf       	rjmp	.-2      	; 0x1ee <__stop_program>
