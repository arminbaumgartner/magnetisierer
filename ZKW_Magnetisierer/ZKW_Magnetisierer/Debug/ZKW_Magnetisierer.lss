
ZKW_Magnetisierer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000152  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  000001c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000063b  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000526  00000000  00000000  000008c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c8  00000000  00000000  00000ded  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  000011b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000368  00000000  00000000  000012b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000018b  00000000  00000000  0000161c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000017a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	71 c0       	rjmp	.+226    	; 0xe6 <__vector_1>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__vector_8>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	36 c0       	rjmp	.+108    	; 0x82 <__vector_10>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a4 36       	cpi	r26, 0x64	; 100
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	7c d0       	rcall	.+248    	; 0x134 <main>
  3c:	88 c0       	rjmp	.+272    	; 0x14e <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <init_adc>:
	OCR0A = 156;
}

void init_adc(void)
{
	ADMUX = ADMUX &~ (1<<REFS0);		//Vcc as referenz
  40:	3e 98       	cbi	0x07, 6	; 7
	ADMUX = ADMUX &~ (1<<REFS1);
  42:	3f 98       	cbi	0x07, 7	; 7

	ADMUX = ADMUX | (1<<ADLAR);			//Left adjusted
  44:	3d 9a       	sbi	0x07, 5	; 7
	
	ADMUX = ADMUX &~ (1<<MUX0);			//PB5 ADC0 single ended
  46:	38 98       	cbi	0x07, 0	; 7
	ADMUX = ADMUX &~ (1<<MUX1);
  48:	39 98       	cbi	0x07, 1	; 7
	ADMUX = ADMUX &~ (1<<MUX2);
  4a:	3a 98       	cbi	0x07, 2	; 7
	ADMUX = ADMUX &~ (1<<MUX3);
  4c:	3b 98       	cbi	0x07, 3	; 7
	
	ADCSRA = ADCSRA | (1<<ADEN);		//ADC enable
  4e:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA = ADCSRA | (1<<ADIE);		//Interrupt enable
  50:	33 9a       	sbi	0x06, 3	; 6
	
	ADCSRA = ADCSRA &~ (1<<ADPS0);		//ADC prescaler
  52:	30 98       	cbi	0x06, 0	; 6
	ADCSRA = ADCSRA | (1<<ADPS1);		//Teiler 64
  54:	31 9a       	sbi	0x06, 1	; 6
	ADCSRA = ADCSRA | (1<<ADPS2);
  56:	32 9a       	sbi	0x06, 2	; 6
	
	ADCSRA = ADCSRA | (1<<ADSC);		//Wandlung starten
  58:	36 9a       	sbi	0x06, 6	; 6
  5a:	08 95       	ret

0000005c <init_ext_interrupt>:
	
}

void init_ext_interrupt(void)
{
	MCUCR = MCUCR &~ (1<<ISC00);		//falling edge
  5c:	85 b7       	in	r24, 0x35	; 53
  5e:	8e 7f       	andi	r24, 0xFE	; 254
  60:	85 bf       	out	0x35, r24	; 53
	MCUCR = MCUCR | (1<<ISC01);
  62:	85 b7       	in	r24, 0x35	; 53
  64:	82 60       	ori	r24, 0x02	; 2
  66:	85 bf       	out	0x35, r24	; 53
	
	GIMSK = GIMSK | (1<<INT0);		//Int0 Interrupt freischalten
  68:	8b b7       	in	r24, 0x3b	; 59
  6a:	80 64       	ori	r24, 0x40	; 64
  6c:	8b bf       	out	0x3b, r24	; 59
  6e:	08 95       	ret

00000070 <mosfet_schalten>:
uint8_t overflow_counter = 0;
char schalten = 0;

void mosfet_schalten(void)
{
	MOSFET_EIN;
  70:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  72:	8f e3       	ldi	r24, 0x3F	; 63
  74:	9c e9       	ldi	r25, 0x9C	; 156
  76:	01 97       	sbiw	r24, 0x01	; 1
  78:	f1 f7       	brne	.-4      	; 0x76 <mosfet_schalten+0x6>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <mosfet_schalten+0xc>
  7c:	00 00       	nop
	
	_delay_ms(MOSFETTIME);
	
	MOSFET_AUS;
  7e:	c1 98       	cbi	0x18, 1	; 24
  80:	08 95       	ret

00000082 <__vector_10>:
}

ISR(TIMER0_COMPA_vect)
{
  82:	1f 92       	push	r1
  84:	0f 92       	push	r0
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	0f 92       	push	r0
  8a:	11 24       	eor	r1, r1
  8c:	8f 93       	push	r24
	TCNT0=0;
  8e:	12 be       	out	0x32, r1	; 50
	
	
	overflow_counter++;
  90:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <overflow_counter>
  94:	8f 5f       	subi	r24, 0xFF	; 255
	
	if(overflow_counter >= ZEITDAUER)
  96:	85 30       	cpi	r24, 0x05	; 5
  98:	18 f4       	brcc	.+6      	; 0xa0 <__vector_10+0x1e>
ISR(TIMER0_COMPA_vect)
{
	TCNT0=0;
	
	
	overflow_counter++;
  9a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <overflow_counter>
  9e:	05 c0       	rjmp	.+10     	; 0xaa <__vector_10+0x28>
	
	if(overflow_counter >= ZEITDAUER)
	{
		//PORTB = PORTB ^ (1<<PB0);
		overflow_counter = 0;
  a0:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <overflow_counter>
		schalten = 1;
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		
	}
}
  aa:	8f 91       	pop	r24
  ac:	0f 90       	pop	r0
  ae:	0f be       	out	0x3f, r0	; 63
  b0:	0f 90       	pop	r0
  b2:	1f 90       	pop	r1
  b4:	18 95       	reti

000000b6 <__vector_8>:
ISR (ADC_vect)
{
  b6:	1f 92       	push	r1
  b8:	0f 92       	push	r0
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	0f 92       	push	r0
  be:	11 24       	eor	r1, r1
  c0:	8f 93       	push	r24
	adc_low = ADCL;
  c2:	84 b1       	in	r24, 0x04	; 4
  c4:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <adc_low>
	adc_high = ADCH;
  c8:	85 b1       	in	r24, 0x05	; 5
  ca:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <adc_high>
	
	
	if(adc_high >= V_CAP)
  ce:	84 3b       	cpi	r24, 0xB4	; 180
  d0:	10 f0       	brcs	.+4      	; 0xd6 <__vector_8+0x20>
	{
		PORTB = PORTB | (1<<PB4);		//LED ein
  d2:	c4 9a       	sbi	0x18, 4	; 24
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <__vector_8+0x22>
	}
	else
	{
		PORTB = PORTB &~ (1<<PB4);		//LED aus
  d6:	c4 98       	cbi	0x18, 4	; 24
	}
	
	ADCSRA = ADCSRA | (1<<ADSC);	//Wandlung starten
  d8:	36 9a       	sbi	0x06, 6	; 6
}
  da:	8f 91       	pop	r24
  dc:	0f 90       	pop	r0
  de:	0f be       	out	0x3f, r0	; 63
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <__vector_1>:
ISR(INT0_vect)
{
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	2f 93       	push	r18
  f2:	3f 93       	push	r19
  f4:	4f 93       	push	r20
  f6:	5f 93       	push	r21
  f8:	6f 93       	push	r22
  fa:	7f 93       	push	r23
  fc:	8f 93       	push	r24
  fe:	9f 93       	push	r25
 100:	af 93       	push	r26
 102:	bf 93       	push	r27
 104:	ef 93       	push	r30
 106:	ff 93       	push	r31
	if(adc_high >= V_CAP)
 108:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <adc_high>
 10c:	84 3b       	cpi	r24, 0xB4	; 180
 10e:	08 f0       	brcs	.+2      	; 0x112 <__vector_1+0x2c>
	{
		mosfet_schalten();
 110:	af df       	rcall	.-162    	; 0x70 <mosfet_schalten>
	}
	
	
 112:	ff 91       	pop	r31
 114:	ef 91       	pop	r30
 116:	bf 91       	pop	r27
 118:	af 91       	pop	r26
 11a:	9f 91       	pop	r25
 11c:	8f 91       	pop	r24
 11e:	7f 91       	pop	r23
 120:	6f 91       	pop	r22
 122:	5f 91       	pop	r21
 124:	4f 91       	pop	r20
 126:	3f 91       	pop	r19
 128:	2f 91       	pop	r18
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <main>:


int main(void)
{
	
	CLKPR = 0x80;						//Clock prescaler 16MHz
 134:	80 e8       	ldi	r24, 0x80	; 128
 136:	86 bd       	out	0x26, r24	; 38
	CLKPR = 0x00;
 138:	16 bc       	out	0x26, r1	; 38
	
//	DDRB = DDRB | (1<<DDB0);		//Debug
	DDRB = DDRB | (1<<DDB1);		//MOSFET
 13a:	b9 9a       	sbi	0x17, 1	; 23
	
	DDRB = DDRB &~ (1<<DDB5);		//ADC
 13c:	bd 98       	cbi	0x17, 5	; 23
	
	
	DDRB = DDRB &~ (1<<DDB2);		//int0
 13e:	ba 98       	cbi	0x17, 2	; 23
	PORTB = PORTB | (1<<PB2);		//pullup
 140:	c2 9a       	sbi	0x18, 2	; 24
	
	DDRB = DDRB | (1<<DDB4);		//Debug LED
 142:	bc 9a       	sbi	0x17, 4	; 23
	PORTB = PORTB &~ (1<<PB4);
 144:	c4 98       	cbi	0x18, 4	; 24
	
	
	
	
	//init_timer();
	init_adc();
 146:	7c df       	rcall	.-264    	; 0x40 <init_adc>
	init_ext_interrupt();
 148:	89 df       	rcall	.-238    	; 0x5c <init_ext_interrupt>
	
	
	sei();
 14a:	78 94       	sei
 14c:	ff cf       	rjmp	.-2      	; 0x14c <main+0x18>

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
