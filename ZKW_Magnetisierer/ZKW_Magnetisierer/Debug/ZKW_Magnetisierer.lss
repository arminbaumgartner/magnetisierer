
ZKW_Magnetisierer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000194  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000208  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000644  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000526  00000000  00000000  00000910  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003da  00000000  00000000  00000e36  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  00001210  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000368  00000000  00000000  00001314  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001a5  00000000  00000000  0000167c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001821  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	8d c0       	rjmp	.+282    	; 0x11e <__vector_1>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	68 c0       	rjmp	.+208    	; 0xe2 <__vector_8>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	48 c0       	rjmp	.+144    	; 0xa6 <__vector_10>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a4 36       	cpi	r26, 0x64	; 100
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	9e d0       	rcall	.+316    	; 0x178 <main>
  3c:	a9 c0       	rjmp	.+338    	; 0x190 <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <init_timer>:
void init_timer(void)
{
	TCCR0B = TCCR0B | (1<<CS00);		//Pre-scaler 1024 (8MHz/1024 = 128µs)
  40:	83 b7       	in	r24, 0x33	; 51
  42:	81 60       	ori	r24, 0x01	; 1
  44:	83 bf       	out	0x33, r24	; 51
	TCCR0B = TCCR0B &~ (1<<CS01);
  46:	83 b7       	in	r24, 0x33	; 51
  48:	8d 7f       	andi	r24, 0xFD	; 253
  4a:	83 bf       	out	0x33, r24	; 51
	TCCR0B = TCCR0B | (1<<CS02);
  4c:	83 b7       	in	r24, 0x33	; 51
  4e:	84 60       	ori	r24, 0x04	; 4
  50:	83 bf       	out	0x33, r24	; 51
	
	
	
	TIMSK = TIMSK | (1<<OCIE0A);	//interrupt
  52:	89 b7       	in	r24, 0x39	; 57
  54:	80 61       	ori	r24, 0x10	; 16
  56:	89 bf       	out	0x39, r24	; 57
	OCR0A = 156;
  58:	8c e9       	ldi	r24, 0x9C	; 156
  5a:	89 bd       	out	0x29, r24	; 41
  5c:	08 95       	ret

0000005e <init_adc>:
}

void init_adc(void)
{
	ADMUX = ADMUX &~ (1<<REFS0);		//Vcc as referenz
  5e:	3e 98       	cbi	0x07, 6	; 7
	ADMUX = ADMUX &~ (1<<REFS1);
  60:	3f 98       	cbi	0x07, 7	; 7

	ADMUX = ADMUX | (1<<ADLAR);			//Left adjusted
  62:	3d 9a       	sbi	0x07, 5	; 7
	
	ADMUX = ADMUX &~ (1<<MUX0);			//PB5 ADC0 single ended
  64:	38 98       	cbi	0x07, 0	; 7
	ADMUX = ADMUX &~ (1<<MUX1);
  66:	39 98       	cbi	0x07, 1	; 7
	ADMUX = ADMUX &~ (1<<MUX2);
  68:	3a 98       	cbi	0x07, 2	; 7
	ADMUX = ADMUX &~ (1<<MUX3);
  6a:	3b 98       	cbi	0x07, 3	; 7
	
	ADCSRA = ADCSRA | (1<<ADEN);		//ADC enable
  6c:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA = ADCSRA | (1<<ADIE);		//Interrupt enable
  6e:	33 9a       	sbi	0x06, 3	; 6
	
	ADCSRA = ADCSRA &~ (1<<ADPS0);		//ADC prescaler
  70:	30 98       	cbi	0x06, 0	; 6
	ADCSRA = ADCSRA | (1<<ADPS1);		//Teiler 64
  72:	31 9a       	sbi	0x06, 1	; 6
	ADCSRA = ADCSRA | (1<<ADPS2);
  74:	32 9a       	sbi	0x06, 2	; 6
	
	ADCSRA = ADCSRA | (1<<ADSC);		//Wandlung starten
  76:	36 9a       	sbi	0x06, 6	; 6
  78:	08 95       	ret

0000007a <init_ext_interrupt>:
	
}

void init_ext_interrupt(void)
{
	MCUCR = MCUCR | (1<<ISC00);		//rising edge Trigger
  7a:	85 b7       	in	r24, 0x35	; 53
  7c:	81 60       	ori	r24, 0x01	; 1
  7e:	85 bf       	out	0x35, r24	; 53
	MCUCR = MCUCR | (1<<ISC01);
  80:	85 b7       	in	r24, 0x35	; 53
  82:	82 60       	ori	r24, 0x02	; 2
  84:	85 bf       	out	0x35, r24	; 53
	
	GIMSK = GIMSK | (1<<INT0);		//Int0 Interrupt freischalten
  86:	8b b7       	in	r24, 0x3b	; 59
  88:	80 64       	ori	r24, 0x40	; 64
  8a:	8b bf       	out	0x3b, r24	; 59
  8c:	08 95       	ret

0000008e <mosfet_schalten>:
uint8_t overflow_counter = 0;
char schalten = 0;

void mosfet_schalten(void)
{
	MOSFET_EIN;
  8e:	c4 9a       	sbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	2f ef       	ldi	r18, 0xFF	; 255
  92:	83 ed       	ldi	r24, 0xD3	; 211
  94:	90 e3       	ldi	r25, 0x30	; 48
  96:	21 50       	subi	r18, 0x01	; 1
  98:	80 40       	sbci	r24, 0x00	; 0
  9a:	90 40       	sbci	r25, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <mosfet_schalten+0x8>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <mosfet_schalten+0x12>
  a0:	00 00       	nop
	
	_delay_ms(MOSFETTIME);
	
	MOSFET_AUS;
  a2:	c4 98       	cbi	0x18, 4	; 24
  a4:	08 95       	ret

000000a6 <__vector_10>:
}

ISR(TIMER0_COMPA_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
	TCNT0=0;
  b4:	12 be       	out	0x32, r1	; 50
	
	
	overflow_counter++;
  b6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <overflow_counter>
  ba:	8f 5f       	subi	r24, 0xFF	; 255
  bc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <overflow_counter>
	
	if(overflow_counter >= ZEITDAUER)
  c0:	85 30       	cpi	r24, 0x05	; 5
  c2:	40 f0       	brcs	.+16     	; 0xd4 <__vector_10+0x2e>
	{
		PORTB = PORTB ^ (1<<PB0);
  c4:	88 b3       	in	r24, 0x18	; 24
  c6:	91 e0       	ldi	r25, 0x01	; 1
  c8:	89 27       	eor	r24, r25
  ca:	88 bb       	out	0x18, r24	; 24
		overflow_counter = 0;
  cc:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <overflow_counter>
		schalten = 1;
  d0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <_edata>
		
	}
}
  d4:	9f 91       	pop	r25
  d6:	8f 91       	pop	r24
  d8:	0f 90       	pop	r0
  da:	0f be       	out	0x3f, r0	; 63
  dc:	0f 90       	pop	r0
  de:	1f 90       	pop	r1
  e0:	18 95       	reti

000000e2 <__vector_8>:
ISR (ADC_vect)
{
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
	PORTB = PORTB ^ (1<<PB1);
  f0:	98 b3       	in	r25, 0x18	; 24
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	89 27       	eor	r24, r25
  f6:	88 bb       	out	0x18, r24	; 24
	adc_low = ADCL;
  f8:	84 b1       	in	r24, 0x04	; 4
  fa:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <adc_low>
	adc_high = ADCH;
  fe:	85 b1       	in	r24, 0x05	; 5
 100:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <adc_high>
	
	
	if(adc_high >= V_CAP)
 104:	8a 30       	cpi	r24, 0x0A	; 10
 106:	10 f0       	brcs	.+4      	; 0x10c <__vector_8+0x2a>
	{
		PORTB = PORTB | (1<<PB3);		//LED ein
 108:	c3 9a       	sbi	0x18, 3	; 24
 10a:	01 c0       	rjmp	.+2      	; 0x10e <__vector_8+0x2c>
	}
	else
	{
		PORTB = PORTB &~ (1<<PB3);		//LED aus
 10c:	c3 98       	cbi	0x18, 3	; 24
	}
	
	ADCSRA = ADCSRA | (1<<ADSC);	//Wandlung starten
 10e:	36 9a       	sbi	0x06, 6	; 6
}
 110:	9f 91       	pop	r25
 112:	8f 91       	pop	r24
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <__vector_1>:
ISR(INT0_vect)
{
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	2f 93       	push	r18
 12a:	3f 93       	push	r19
 12c:	4f 93       	push	r20
 12e:	5f 93       	push	r21
 130:	6f 93       	push	r22
 132:	7f 93       	push	r23
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
 138:	af 93       	push	r26
 13a:	bf 93       	push	r27
 13c:	ef 93       	push	r30
 13e:	ff 93       	push	r31
	if(adc_high >= V_CAP && schalten == 1)
 140:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <adc_high>
 144:	8a 30       	cpi	r24, 0x0A	; 10
 146:	38 f0       	brcs	.+14     	; 0x156 <__vector_1+0x38>
 148:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 14c:	81 30       	cpi	r24, 0x01	; 1
 14e:	19 f4       	brne	.+6      	; 0x156 <__vector_1+0x38>
	{
		mosfet_schalten();
 150:	9e df       	rcall	.-196    	; 0x8e <mosfet_schalten>
		schalten = 0;
 152:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	}
	
 156:	ff 91       	pop	r31
 158:	ef 91       	pop	r30
 15a:	bf 91       	pop	r27
 15c:	af 91       	pop	r26
 15e:	9f 91       	pop	r25
 160:	8f 91       	pop	r24
 162:	7f 91       	pop	r23
 164:	6f 91       	pop	r22
 166:	5f 91       	pop	r21
 168:	4f 91       	pop	r20
 16a:	3f 91       	pop	r19
 16c:	2f 91       	pop	r18
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <main>:


int main(void)
{
	
	CLKPR = 0x80;						//Clock prescaler 16MHz
 178:	80 e8       	ldi	r24, 0x80	; 128
 17a:	86 bd       	out	0x26, r24	; 38
	CLKPR = 0x00;
 17c:	16 bc       	out	0x26, r1	; 38
	
	DDRB = DDRB | (1<<DDB0);		//Debug
 17e:	b8 9a       	sbi	0x17, 0	; 23
	DDRB = DDRB | (1<<DDB1);		//Debug
 180:	b9 9a       	sbi	0x17, 1	; 23
	
	//DDRB = DDRB &~ (1<<DDB2);		//int0
	
	DDRB = DDRB | (1<<DDB3);		//Debug LED
 182:	bb 9a       	sbi	0x17, 3	; 23
	PORTB = PORTB &~ (1<<PB3);
 184:	c3 98       	cbi	0x18, 3	; 24
	
	init_timer();
 186:	5c df       	rcall	.-328    	; 0x40 <init_timer>
	init_adc();
 188:	6a df       	rcall	.-300    	; 0x5e <init_adc>
	init_ext_interrupt();
 18a:	77 df       	rcall	.-274    	; 0x7a <init_ext_interrupt>
	
	
	sei();
 18c:	78 94       	sei
 18e:	ff cf       	rjmp	.-2      	; 0x18e <main+0x16>

00000190 <_exit>:
 190:	f8 94       	cli

00000192 <__stop_program>:
 192:	ff cf       	rjmp	.-2      	; 0x192 <__stop_program>
